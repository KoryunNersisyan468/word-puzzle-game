import { useState, useEffect } from "react";
import image from "../assets/puzzle.jpg";


type Tile = number;

export default function ImagePuzzle({ size = 3 }: { size?: number }) {


  const total = size * size;
  const [tiles, setTiles] = useState<Tile[]>([]);
  const [message, setMessage] = useState("");

  useEffect(() => {
    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –Ω–æ–º–µ—Ä–æ–≤ —Ç–∞–π–ª–æ–≤ –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –µ–≥–æ
    const initial = Array.from({ length: total }, (_, i) => i);
    setTiles(shuffle(initial));
  }, [size]);

  function shuffle(arr: Tile[]): Tile[] {
    // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞
    const copy = [...arr];
    for (let i = copy.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [copy[i], copy[j]] = [copy[j], copy[i]];
    }
    return copy;
  }

  function handleDragStart(e: React.DragEvent<HTMLDivElement>, index: number) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–≥–æ —Ç–∞–π–ª–∞
    e.dataTransfer.setData("tileIndex", index.toString());
  }

  function handleDrop(e: React.DragEvent<HTMLDivElement>, dropIndex: number) {
    e.preventDefault();
    const dragIndex = parseInt(e.dataTransfer.getData("tileIndex"), 10);
    if (isNaN(dragIndex)) return;

    // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Ç–∞–π–ª—ã –ø—Ä–∏ —Å–±—Ä–æ—Å–µ
    const newTiles = [...tiles];
    [newTiles[dragIndex], newTiles[dropIndex]] = [newTiles[dropIndex], newTiles[dragIndex]];
    setTiles(newTiles);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–±—Ä–∞–Ω –ª–∏ –ø–∞–∑–ª
    if (isSolved(newTiles)) {
      setMessage("üéâ –°–æ–±—Ä–∞–Ω–æ!");
    } else {
      setMessage("");
    }
  }

  function handleDragOver(e: React.DragEvent<HTMLDivElement>) {
    // –†–∞–∑—Ä–µ—à–∞–µ–º drop
    e.preventDefault();
  }

  function isSolved(arr: Tile[]) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ—Ä—è–¥–æ–∫ —Ç–∞–π–ª–æ–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É
    return arr.every((v, i) => v === i);
  }

  return (
    <div className="max-w-2xl p-6"> {/* –£–≤–µ–ª–∏—á–∏–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –∏ padding */}
      <header className="flex items-center justify-between mb-4">
        <h1 className="text-2xl font-semibold">Drag & Drop –ü–∞–∑–ª {size}√ó{size}</h1> {/* –£–≤–µ–ª–∏—á–∏–ª —Ä–∞–∑–º–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞ */}
        
      </header>

      <section
        className="grid gap-2 bg-slate-300 p-2 rounded-xl"
        style={{ gridTemplateColumns: `repeat(${size}, 1fr)` }}
      >
        {tiles.map((tile, idx) => {
          const r = Math.floor(tile / size);
          const c = tile % size;
          return (
            <div
              key={idx}
              draggable
              onDragStart={(e) => handleDragStart(e, idx)}
              onDrop={(e) => handleDrop(e, idx)}
              onDragOver={handleDragOver}
              className="relative aspect-square rounded-md overflow-hidden cursor-move bg-slate-200"
              style={{ minHeight: '180px', minWidth: '180px' }} // –£–≤–µ–ª–∏—á–∏–ª —Ä–∞–∑–º–µ—Ä —Ç–∞–π–ª–æ–≤
            >
              <div
                className="absolute inset-0 bg-cover"
                style={{
                  backgroundImage: `url(${image})`,
                  backgroundSize: `${size * 100}% ${size * 100}%`,
                  backgroundPosition: `${(c / (size - 1)) * 100}% ${(r / (size - 1)) * 100}%`,
                }}
              />
            </div>
          );
        })}
      </section>

      <div className="mt-4 gap-12 flex items-center justify-center">
        <button
          onClick={() => { setTiles(shuffle(Array.from({ length: total }, (_, i) => i))); setMessage(""); }}
          className="px-4 py-2 rounded-lg shadow-sm border hover:shadow-md text-lg" // –£–≤–µ–ª–∏—á–∏–ª –∫–Ω–æ–ø–∫—É
        >
          –ü–µ—Ä–µ–º–µ—à–∞—Ç—å
        </button>
        {message && <div className="text-emerald-600 font-semibold text-lg">{message}</div>}
        
      </div>
    </div>
  );
}